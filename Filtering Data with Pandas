1.Filter dataframe based on one condition

import pandas as pd

# Sample dataset
data = {
    "Company": ["Apple", "Dell", "Apple", "HP", "Apple", "Lenovo"],
    "Price_euros": [2500, 1500, 3000, 1200, 1800, 1000]
}

# Create DataFrame
df_laptops = pd.DataFrame(data)

# Filter Apple laptops
apple_laptops = df_laptops[df_laptops['Company'] == "Apple"]

# Print result
print(apple_laptops)

# Count how many Apple laptops
print(apple_laptops['Company'].value_counts())



Exercise

1.1  # Boolean mask (True if not HP, False if HP)
df_laptops['Company'] != "HP"

# Filter dataframe
df_laptops[df_laptops['Company'] != "HP"]

df_laptops[df_laptops['Company'] != "HP"]['Company'].value_counts()


1.2 # Boolean mask
df_laptops['Price_euros'] > 2000

# Filter dataframe
df_laptops[df_laptops['Price_euros'] > 2000]


1.3. Create column based on a condition
import pandas as pd
import numpy as np

# Sample data
data = {
    "Laptop": ["A", "B", "C", "D", "E"],
    "Price_euros": [500, 1500, 2500, 3000, 1200]
}

df_laptops = pd.DataFrame(data)

# Create a new column 'Price_tier' using np.where
df_laptops["Price_tier"] = np.where(df_laptops["Price_euros"] > 2000, "Expensive", "Cheap")

# Show the DataFrame
print(df_laptops)

# Count how many laptops are cheap vs expensive
print(df_laptops["Price_tier"].value_counts())

2. Filter dataframe based on multiple condition

2.1 & Add condition
# Example: Find Apple laptops that cost more than 2000 euros
df_laptops[(df_laptops['Company'] == 'Apple') & (df_laptops['Price_euros'] > 2000)]

2.2 | or condition
# Example: Find laptops that are either Apple or Dell
df_laptops[(df_laptops['Company'] == 'Apple') | (df_laptops['Company'] == 'Dell')]

Examples
1.filter match
import pandas as pd

# Sample data
data = {
    "Team": ["Arsenal", "Chelsea", "Liverpool", "Man City", "Man United"],
    "Points": [83, 75, 89, 93, 74],
    "Goals_Scored": [88, 76, 94, 99, 73]
}

df = pd.DataFrame(data)
print("Original DataFrame:")
print(df)

# Filter teams with more than 80 points
filtered = df[df["Points"] > 80]

print("\nTeams with more than 80 points:")
print(filtered)

2. Multiple matches

# Teams with more than 80 points AND more than 90 goals
filtered = df[(df["Points"] > 80) & (df["Goals_Scored"] > 90)]

print("\nTeams with >80 points AND >90 goals:")
print(filtered)

3. import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    "Name": ["Alice", "Bob", "Charlie", "David", "Eva"],
    "Score": [92, 67, 45, 80, 55]
}

df = pd.DataFrame(data)

# Define conditions
conditions = [
    (df["Score"] >= 85),       # Condition 1
    (df["Score"] >= 60) & (df["Score"] < 85),  # Condition 2
    (df["Score"] < 60)         # Condition 3
]

# Define corresponding choices
choices = ["Excellent", "Pass", "Fail"]

# Create new column
df["Result"] = np.select(conditions, choices)

print(df)

4.  # Sample DataFrame
df2 = pd.DataFrame({
    "Student": ["A", "B", "C", "D", "E"],
    "Marks": [95, 76, 58, 40, 83]
})

# Define conditions
conditions = [
    (df2["Marks"] >= 90),
    (df2["Marks"] >= 75) & (df2["Marks"] < 90),
    (df2["Marks"] >= 50) & (df2["Marks"] < 75),
    (df2["Marks"] < 50)
]

# Define choices
choices = ["A", "B", "C", "F"]

# Create new column
df2["Grade"] = np.select(conditions, choices)

print(df2)
5. isin() Single filtering
import pandas as pd

# Sample DataFrame
df = pd.DataFrame({
    "Name": ["Alex", "Bella", "Chris", "Diana", "Ethan"],
    "City": ["London", "Paris", "London", "Berlin", "Paris"]
})

# Filter rows where City is London
filtered = df[df["City"].isin(["London"])]

print(filtered)

6. Multiple filtering
# Filter rows where City is either London or Berlin
filtered_multi = df[df["City"].isin(["London", "Berlin"])]

print(filtered_multi)

7. drop_duplicates
import pandas as pd

df = pd.DataFrame({
    "Name": ["Alex", "Bella", "Chris", "Alex", "Bella", "David", "Chris"],
    "City": ["London", "Paris", "Berlin", "London", "Rome", "Rome", "Berlin"]
})

print(df)
8. unique()
print(df["City"].unique())

9. nunique()
print(df["Name"].nunique())

10. loc()
import pandas as pd

data = {
    "Name": ["Alex", "Bella", "Chris", "David", "Eva"],
    "Age": [25, 30, 22, 35, 28],
    "City": ["London", "Paris", "Berlin", "Madrid", "Rome"]
}

df = pd.DataFrame(data, index=["a", "b", "c", "d", "e"])
print(df)

10.1 # Single row by label
print(df.loc["b"])
10.2 # Multiple rows by labels
print(df.loc[["a", "c", "e"]])

11.nunique
# First row (index 0)
print(df.iloc[0])

11.1 # Multiple rows and columns
print(df.iloc[[0, 2, 4], [0, 2]])

